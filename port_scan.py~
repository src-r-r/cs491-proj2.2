#!/usr/bin/env python

import pcapy
import getopt, sys
from dpkt import http
from dpkt import pcap
from dpkt import ip
import proto_dict

"""
def generate_ip_list(pcap_src):
  reader = pcapy.open_offline(pcap_src)
  # print "Got a reader: ", reader
  # myfilter = "smtp.rsp || http.server || tcp.analysis.ack_rtt || dns.resp.addr || arp.opcode==reply"
  myfilter = 'tcp'
  reader.setfilter(myfilter)
  list_values = generate_list(reader)
  for item in list_values:
    print item[0]
    """

def generate_ip_list(pcap_src):
  import dpkt
  f = open(pcap_src)
  pcap = dpkt.pcap.Reader(f)
  for ts, buf in pcap:
    eth = dpkt.ethernet.Ethernet(buf)
    t = proto_dict.get_proto_name(eth.get_type())
    print "Type is", t
  
def generate_list(reader):
  list_values = []
  while True:
    (header, value) = reader.next()
    if (header == None):
      return list_values
    list_values.extend((header,value))

def throw_argv_error():
  print """
    Usage:
    ./port_scan.py tcpdumpfile.tcpdump
    """

def main():
  ## 1. Generate a list of the IP addresses/ports that appear to act as servers (e.g. web,mail,tcp).
  if len(sys.argv) != 2:
    throw_argv_error()
    return
  filename = sys.argv[1]
  generate_ip_list(filename)

if __name__=='__main__':
  main()